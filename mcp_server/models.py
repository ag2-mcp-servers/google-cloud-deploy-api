# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:11:58+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class AbandonReleaseRequest(BaseModel):
    pass


class AbandonReleaseResponse(BaseModel):
    pass


class AdvanceChildRolloutJob(BaseModel):
    pass


class AdvanceChildRolloutJobRun(BaseModel):
    rollout: Optional[str] = Field(
        None,
        description='Output only. Name of the `ChildRollout`. Format is projects/{project}/ locations/{location}/deliveryPipelines/{deliveryPipeline}/ releases/{release}/rollouts/a-z{0,62}.',
    )
    rolloutPhaseId: Optional[str] = Field(
        None, description="Output only. the ID of the ChildRollout's Phase."
    )


class AdvanceRolloutRequest(BaseModel):
    phaseId: Optional[str] = Field(
        None, description='Required. The phase ID to advance the `Rollout` to.'
    )


class AdvanceRolloutResponse(BaseModel):
    pass


class AnthosCluster(BaseModel):
    membership: Optional[str] = Field(
        None,
        description='Membership of the GKE Hub-registered cluster to which to apply the Skaffold configuration. Format is `projects/{project}/locations/{location}/memberships/{membership_name}`.',
    )


class ApproveRolloutRequest(BaseModel):
    approved: Optional[bool] = Field(
        None, description='Required. True = approve; false = reject'
    )


class ApproveRolloutResponse(BaseModel):
    pass


class LogType(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


class AuditLogConfig(BaseModel):
    exemptedMembers: Optional[List[str]] = Field(
        None,
        description='Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.',
    )
    logType: Optional[LogType] = Field(
        None, description='The log type that this config enables.'
    )


class BuildArtifact(BaseModel):
    image: Optional[str] = Field(
        None, description='Image name in Skaffold configuration.'
    )
    tag: Optional[str] = Field(
        None,
        description='Image tag to use. This will generally be the full path to an image, such as "gcr.io/my-project/busybox:1.2.3" or "gcr.io/my-project/busybox@sha256:abc123".',
    )


class CanaryDeployment(BaseModel):
    percentages: Optional[List[int]] = Field(
        None,
        description='Required. The percentage based deployments that will occur as a part of a `Rollout`. List is expected in ascending order and each integer n is 0 <= n < 100.',
    )
    verify: Optional[bool] = Field(
        None,
        description='Whether to run verify tests after each percentage deployment.',
    )


class CancelOperationRequest(BaseModel):
    pass


class CancelRolloutRequest(BaseModel):
    pass


class CancelRolloutResponse(BaseModel):
    pass


class CloudRunConfig(BaseModel):
    automaticTrafficControl: Optional[bool] = Field(
        None,
        description="Whether Cloud Deploy should update the traffic stanza in a Cloud Run Service on the user's behalf to facilitate traffic splitting. This is required to be true for CanaryDeployments, but optional for CustomCanaryDeployments.",
    )


class CloudRunLocation(BaseModel):
    location: Optional[str] = Field(
        None,
        description='Required. The location for the Cloud Run Service. Format must be `projects/{project}/locations/{location}`.',
    )


class CloudRunMetadata(BaseModel):
    revision: Optional[str] = Field(
        None,
        description='Output only. The Cloud Run Revision id associated with a `Rollout`.',
    )
    service: Optional[str] = Field(
        None,
        description='Output only. The name of the Cloud Run Service that is associated with a `Rollout`. Format is projects/{project}/locations/{location}/services/{service}.',
    )
    serviceUrls: Optional[List[str]] = Field(
        None,
        description='Output only. The Cloud Run Service urls that are associated with a `Rollout`.',
    )


class CloudRunRenderMetadata(BaseModel):
    service: Optional[str] = Field(
        None,
        description='Output only. The name of the Cloud Run Service in the rendered manifest. Format is projects/{project}/locations/{location}/services/{service}.',
    )


class CreateChildRolloutJob(BaseModel):
    pass


class CreateChildRolloutJobRun(BaseModel):
    rollout: Optional[str] = Field(
        None,
        description='Output only. Name of the `ChildRollout`. Format is projects/{project}/ locations/{location}/deliveryPipelines/{deliveryPipeline}/ releases/{release}/rollouts/a-z{0,62}.',
    )
    rolloutPhaseId: Optional[str] = Field(
        None,
        description='Output only. The ID of the childRollout Phase initiated by this JobRun.',
    )


class Date(BaseModel):
    day: Optional[int] = Field(
        None,
        description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
    )
    month: Optional[int] = Field(
        None,
        description='Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.',
    )
    year: Optional[int] = Field(
        None,
        description='Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.',
    )


class DefaultPool(BaseModel):
    artifactStorage: Optional[str] = Field(
        None,
        description='Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.',
    )
    serviceAccount: Optional[str] = Field(
        None,
        description='Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.',
    )


class Type(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    TYPE_PUBSUB_NOTIFICATION_FAILURE = 'TYPE_PUBSUB_NOTIFICATION_FAILURE'
    TYPE_RENDER_STATUES_CHANGE = 'TYPE_RENDER_STATUES_CHANGE'


class DeliveryPipelineNotificationEvent(BaseModel):
    deliveryPipeline: Optional[str] = Field(
        None, description='The name of the `Delivery Pipeline`.'
    )
    message: Optional[str] = Field(
        None, description='Debug message for when a notification fails to send.'
    )
    type: Optional[Type] = Field(
        None, description='Type of this notification, e.g. for a Pub/Sub failure.'
    )


class DeployJob(BaseModel):
    pass


class FailureCause(Enum):
    FAILURE_CAUSE_UNSPECIFIED = 'FAILURE_CAUSE_UNSPECIFIED'
    CLOUD_BUILD_UNAVAILABLE = 'CLOUD_BUILD_UNAVAILABLE'
    EXECUTION_FAILED = 'EXECUTION_FAILED'
    DEADLINE_EXCEEDED = 'DEADLINE_EXCEEDED'
    MISSING_RESOURCES_FOR_CANARY = 'MISSING_RESOURCES_FOR_CANARY'
    CLOUD_BUILD_REQUEST_FAILED = 'CLOUD_BUILD_REQUEST_FAILED'


class DeployJobRunMetadata(BaseModel):
    cloudRun: Optional[CloudRunMetadata] = Field(
        None,
        description='Output only. The name of the Cloud Run Service that is associated with a `DeployJobRun`.',
    )


class Empty(BaseModel):
    pass


class Usage(Enum):
    EXECUTION_ENVIRONMENT_USAGE_UNSPECIFIED = 'EXECUTION_ENVIRONMENT_USAGE_UNSPECIFIED'
    RENDER = 'RENDER'
    DEPLOY = 'DEPLOY'
    VERIFY = 'VERIFY'


class Expr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class GatewayServiceMesh(BaseModel):
    deployment: Optional[str] = Field(
        None,
        description='Required. Name of the Kubernetes Deployment whose traffic is managed by the specified HTTPRoute and Service.',
    )
    httpRoute: Optional[str] = Field(
        None, description='Required. Name of the Gateway API HTTPRoute.'
    )
    service: Optional[str] = Field(
        None, description='Required. Name of the Kubernetes Service.'
    )


class GkeCluster(BaseModel):
    cluster: Optional[str] = Field(
        None,
        description='Information specifying a GKE Cluster. Format is `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}.',
    )
    internalIp: Optional[bool] = Field(
        None,
        description='Optional. If true, `cluster` is accessed using the private IP address of the control plane endpoint. Otherwise, the default IP address of the control plane endpoint is used. The default IP address is the private IP address for clusters with private control-plane endpoints and the public IP address otherwise. Only specify this option when `cluster` is a [private GKE cluster](https://cloud.google.com/kubernetes-engine/docs/concepts/private-cluster-concept).',
    )


class IgnoreJobRequest(BaseModel):
    jobId: Optional[str] = Field(
        None, description='Required. The job ID for the Job to ignore.'
    )
    phaseId: Optional[str] = Field(
        None, description='Required. The phase ID the Job to ignore belongs to.'
    )


class IgnoreJobResponse(BaseModel):
    pass


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    DISABLED = 'DISABLED'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    ABORTED = 'ABORTED'
    SKIPPED = 'SKIPPED'
    IGNORED = 'IGNORED'


class State1(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    TERMINATING = 'TERMINATING'
    TERMINATED = 'TERMINATED'


class JobRunNotificationEvent(BaseModel):
    jobRun: Optional[str] = Field(None, description='The name of the `JobRun`.')
    message: Optional[str] = Field(
        None, description='Debug message for when a notification fails to send.'
    )
    pipelineUid: Optional[str] = Field(
        None, description='Unique identifier of the `DeliveryPipeline`.'
    )
    releaseUid: Optional[str] = Field(
        None, description='Unique identifier of the `Release`.'
    )
    rolloutUid: Optional[str] = Field(
        None, description='Unique identifier of the `Rollout`.'
    )
    targetId: Optional[str] = Field(None, description='ID of the `Target`.')
    type: Optional[Type] = Field(
        None, description='Type of this notification, e.g. for a Pub/Sub failure.'
    )


class Location(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The friendly name for this location, typically a nearby city name. For example, "Tokyo".',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}',
    )
    locationId: Optional[str] = Field(
        None,
        description='The canonical id for this location. For example: `"us-east1"`.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata. For example the available capacity at the given location.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`',
    )


class Metadata(BaseModel):
    cloudRun: Optional[CloudRunMetadata] = Field(
        None,
        description='Output only. The name of the Cloud Run Service that is associated with a `Rollout`.',
    )


class MultiTarget(BaseModel):
    targetIds: Optional[List[str]] = Field(
        None, description='Required. The target_ids of this multiTarget.'
    )


class OperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class State2(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    ABORTED = 'ABORTED'
    SKIPPED = 'SKIPPED'


class PhaseArtifact(BaseModel):
    manifestPath: Optional[str] = Field(
        None,
        description='Output only. File path of the rendered manifest relative to the URI.',
    )
    skaffoldConfigPath: Optional[str] = Field(
        None,
        description='Output only. File path of the resolved Skaffold configuration relative to the URI.',
    )


class PhaseConfig(BaseModel):
    percentage: Optional[int] = Field(
        None, description='Required. Percentage deployment for the phase.'
    )
    phaseId: Optional[str] = Field(
        None,
        description='Required. The ID to assign to the `Rollout` phase. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.',
    )
    profiles: Optional[List[str]] = Field(
        None,
        description='Skaffold profiles to use when rendering the manifest for this phase. These are in addition to the profiles list specified in the `DeliveryPipeline` stage.',
    )
    verify: Optional[bool] = Field(
        None, description='Whether to run verify tests after the deployment.'
    )


class PipelineReadyCondition(BaseModel):
    status: Optional[bool] = Field(
        None,
        description='True if the Pipeline is in a valid state. Otherwise at least one condition in `PipelineCondition` is in an invalid state. Iterate over those conditions and see which condition(s) has status = false to find out what is wrong with the Pipeline.',
    )
    updateTime: Optional[str] = Field(
        None, description='Last time the condition was updated.'
    )


class PrivatePool(BaseModel):
    artifactStorage: Optional[str] = Field(
        None,
        description='Optional. Cloud Storage location where execution outputs should be stored. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.',
    )
    serviceAccount: Optional[str] = Field(
        None,
        description='Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) will be used.',
    )
    workerPool: Optional[str] = Field(
        None,
        description='Required. Resource name of the Cloud Build worker pool to use. The format is `projects/{project}/locations/{location}/workerPools/{pool}`.',
    )


class RenderState(Enum):
    RENDER_STATE_UNSPECIFIED = 'RENDER_STATE_UNSPECIFIED'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    IN_PROGRESS = 'IN_PROGRESS'


class ReleaseNotificationEvent(BaseModel):
    message: Optional[str] = Field(
        None, description='Debug message for when a notification fails to send.'
    )
    release: Optional[str] = Field(None, description='The name of the `Release`.')
    type: Optional[Type] = Field(
        None, description='Type of this notification, e.g. for a Pub/Sub failure.'
    )


class ReleaseReadyCondition(BaseModel):
    status: Optional[bool] = Field(
        None,
        description='True if the Release is in a valid state. Otherwise at least one condition in `ReleaseCondition` is in an invalid state. Iterate over those conditions and see which condition(s) has status = false to find out what is wrong with the Release.',
    )


class ReleaseRenderEvent(BaseModel):
    message: Optional[str] = Field(
        None,
        description='Debug message for when a render transition occurs. Provides further details as rendering progresses through render states.',
    )
    release: Optional[str] = Field(None, description='The name of the `Release`.')


class RenderMetadata(BaseModel):
    cloudRun: Optional[CloudRunRenderMetadata] = Field(
        None,
        description='Output only. Metadata associated with rendering for Cloud Run.',
    )


class RetryJobRequest(BaseModel):
    jobId: Optional[str] = Field(
        None, description='Required. The job ID for the Job to retry.'
    )
    phaseId: Optional[str] = Field(
        None, description='Required. The phase ID the Job to retry belongs to.'
    )


class RetryJobResponse(BaseModel):
    pass


class ApprovalState(Enum):
    APPROVAL_STATE_UNSPECIFIED = 'APPROVAL_STATE_UNSPECIFIED'
    NEEDS_APPROVAL = 'NEEDS_APPROVAL'
    DOES_NOT_NEED_APPROVAL = 'DOES_NOT_NEED_APPROVAL'
    APPROVED = 'APPROVED'
    REJECTED = 'REJECTED'


class DeployFailureCause(Enum):
    FAILURE_CAUSE_UNSPECIFIED = 'FAILURE_CAUSE_UNSPECIFIED'
    CLOUD_BUILD_UNAVAILABLE = 'CLOUD_BUILD_UNAVAILABLE'
    EXECUTION_FAILED = 'EXECUTION_FAILED'
    DEADLINE_EXCEEDED = 'DEADLINE_EXCEEDED'
    RELEASE_FAILED = 'RELEASE_FAILED'
    RELEASE_ABANDONED = 'RELEASE_ABANDONED'
    VERIFICATION_CONFIG_NOT_FOUND = 'VERIFICATION_CONFIG_NOT_FOUND'
    CLOUD_BUILD_REQUEST_FAILED = 'CLOUD_BUILD_REQUEST_FAILED'


class State3(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    IN_PROGRESS = 'IN_PROGRESS'
    PENDING_APPROVAL = 'PENDING_APPROVAL'
    APPROVAL_REJECTED = 'APPROVAL_REJECTED'
    PENDING = 'PENDING'
    PENDING_RELEASE = 'PENDING_RELEASE'
    CANCELLING = 'CANCELLING'
    CANCELLED = 'CANCELLED'
    HALTED = 'HALTED'


class RolloutNotificationEvent(BaseModel):
    message: Optional[str] = Field(
        None, description='Debug message for when a notification fails to send.'
    )
    pipelineUid: Optional[str] = Field(
        None, description='Unique identifier of the `DeliveryPipeline`.'
    )
    releaseUid: Optional[str] = Field(
        None, description='Unique identifier of the `Release`.'
    )
    rollout: Optional[str] = Field(None, description='The name of the `Rollout`.')
    targetId: Optional[str] = Field(
        None, description='ID of the `Target` that the rollout is deployed to.'
    )
    type: Optional[Type] = Field(
        None, description='Type of this notification, e.g. for a Pub/Sub failure.'
    )


class ServiceNetworking(BaseModel):
    deployment: Optional[str] = Field(
        None,
        description='Required. Name of the Kubernetes Deployment whose traffic is managed by the specified Service.',
    )
    service: Optional[str] = Field(
        None, description='Required. Name of the Kubernetes Service.'
    )


class SkaffoldSupportState(Enum):
    SKAFFOLD_SUPPORT_STATE_UNSPECIFIED = 'SKAFFOLD_SUPPORT_STATE_UNSPECIFIED'
    SKAFFOLD_SUPPORT_STATE_SUPPORTED = 'SKAFFOLD_SUPPORT_STATE_SUPPORTED'
    SKAFFOLD_SUPPORT_STATE_MAINTENANCE_MODE = 'SKAFFOLD_SUPPORT_STATE_MAINTENANCE_MODE'
    SKAFFOLD_SUPPORT_STATE_UNSUPPORTED = 'SKAFFOLD_SUPPORT_STATE_UNSUPPORTED'


class SkaffoldSupportedCondition(BaseModel):
    maintenanceModeTime: Optional[str] = Field(
        None,
        description="The time at which this release's version of skaffold will enter maintenance mode.",
    )
    skaffoldSupportState: Optional[SkaffoldSupportState] = Field(
        None,
        description="The skaffold support state for this release's version of skaffold.",
    )
    status: Optional[bool] = Field(
        None,
        description='True if the version of skaffold used by this release is supported.',
    )
    supportExpirationTime: Optional[str] = Field(
        None,
        description="The time at which this release's version of skaffold will no longer be supported.",
    )


class SkaffoldVersion(BaseModel):
    maintenanceModeTime: Optional[str] = Field(
        None,
        description='The time at which this version of skaffold will enter maintenance mode.',
    )
    supportEndDate: Optional[Date] = Field(
        None,
        description='Date when this version is expected to no longer be supported.',
    )
    supportExpirationTime: Optional[str] = Field(
        None,
        description='The time at which this version of skaffold will no longer be supported.',
    )
    version: Optional[str] = Field(
        None, description='Release version number. For example, "1.20.3".'
    )


class Standard(BaseModel):
    verify: Optional[bool] = Field(None, description='Whether to verify a deployment.')


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class TargetArtifact(BaseModel):
    artifactUri: Optional[str] = Field(
        None,
        description='Output only. URI of a directory containing the artifacts. This contains deployment configuration used by Skaffold during a rollout, and all paths are relative to this location.',
    )
    manifestPath: Optional[str] = Field(
        None,
        description='Output only. File path of the rendered manifest relative to the URI.',
    )
    phaseArtifacts: Optional[Dict[str, PhaseArtifact]] = Field(
        None,
        description='Output only. Map from the phase ID to the phase artifacts for the `Target`.',
    )
    skaffoldConfigPath: Optional[str] = Field(
        None,
        description='Output only. File path of the resolved Skaffold configuration relative to the URI.',
    )


class TargetNotificationEvent(BaseModel):
    message: Optional[str] = Field(
        None, description='Debug message for when a notification fails to send.'
    )
    target: Optional[str] = Field(None, description='The name of the `Target`.')
    type: Optional[Type] = Field(
        None, description='Type of this notification, e.g. for a Pub/Sub failure.'
    )


class FailureCause1(Enum):
    FAILURE_CAUSE_UNSPECIFIED = 'FAILURE_CAUSE_UNSPECIFIED'
    CLOUD_BUILD_UNAVAILABLE = 'CLOUD_BUILD_UNAVAILABLE'
    EXECUTION_FAILED = 'EXECUTION_FAILED'
    CLOUD_BUILD_REQUEST_FAILED = 'CLOUD_BUILD_REQUEST_FAILED'


class RenderingState(Enum):
    TARGET_RENDER_STATE_UNSPECIFIED = 'TARGET_RENDER_STATE_UNSPECIFIED'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    IN_PROGRESS = 'IN_PROGRESS'


class TargetRender(BaseModel):
    failureCause: Optional[FailureCause1] = Field(
        None,
        description='Output only. Reason this render failed. This will always be unspecified while the render in progress.',
    )
    failureMessage: Optional[str] = Field(
        None,
        description='Output only. Additional information about the render failure, if available.',
    )
    metadata: Optional[RenderMetadata] = Field(
        None,
        description='Output only. Metadata related to the `Release` render for this Target.',
    )
    renderingBuild: Optional[str] = Field(
        None,
        description='Output only. The resource name of the Cloud Build `Build` object that is used to render the manifest for this target. Format is `projects/{project}/locations/{location}/builds/{build}`.',
    )
    renderingState: Optional[RenderingState] = Field(
        None,
        description='Output only. Current state of the render operation for this Target.',
    )


class TargetsPresentCondition(BaseModel):
    missingTargets: Optional[List[str]] = Field(
        None,
        description='The list of Target names that do not exist. For example, projects/{project_id}/locations/{location_name}/targets/{target_name}.',
    )
    status: Optional[bool] = Field(
        None, description="True if there aren't any missing Targets."
    )
    updateTime: Optional[str] = Field(
        None, description='Last time the condition was updated.'
    )


class TargetsTypeCondition(BaseModel):
    errorDetails: Optional[str] = Field(
        None, description='Human readable error message.'
    )
    status: Optional[bool] = Field(
        None,
        description='True if the targets are all a comparable type. For example this is true if all targets are GKE clusters. This is false if some targets are Cloud Run targets and others are GKE clusters.',
    )


class TerminateJobRunRequest(BaseModel):
    pass


class TerminateJobRunResponse(BaseModel):
    pass


class TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class VerifyJob(BaseModel):
    pass


class FailureCause2(Enum):
    FAILURE_CAUSE_UNSPECIFIED = 'FAILURE_CAUSE_UNSPECIFIED'
    CLOUD_BUILD_UNAVAILABLE = 'CLOUD_BUILD_UNAVAILABLE'
    EXECUTION_FAILED = 'EXECUTION_FAILED'
    DEADLINE_EXCEEDED = 'DEADLINE_EXCEEDED'
    VERIFICATION_CONFIG_NOT_FOUND = 'VERIFICATION_CONFIG_NOT_FOUND'
    CLOUD_BUILD_REQUEST_FAILED = 'CLOUD_BUILD_REQUEST_FAILED'


class VerifyJobRun(BaseModel):
    artifactUri: Optional[str] = Field(
        None,
        description='Output only. URI of a directory containing the verify artifacts. This contains the Skaffold event log.',
    )
    build: Optional[str] = Field(
        None,
        description='Output only. The resource name of the Cloud Build `Build` object that is used to verify. Format is projects/{project}/locations/{location}/builds/{build}.',
    )
    eventLogPath: Optional[str] = Field(
        None,
        description='Output only. File path of the Skaffold event log relative to the artifact URI.',
    )
    failureCause: Optional[FailureCause2] = Field(
        None,
        description='Output only. The reason the verify failed. This will always be unspecified while the verify is in progress or if it succeeded.',
    )
    failureMessage: Optional[str] = Field(
        None,
        description='Output only. Additional information about the verify failure, if available.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class AuditConfig(BaseModel):
    auditLogConfigs: Optional[List[AuditLogConfig]] = Field(
        None, description='The configuration for logging of each type of permission.'
    )
    service: Optional[str] = Field(
        None,
        description='Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.',
    )


class Binding(BaseModel):
    condition: Optional[Expr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class Config(BaseModel):
    defaultSkaffoldVersion: Optional[str] = Field(
        None,
        description='Default Skaffold version that is assigned when a Release is created without specifying a Skaffold version.',
    )
    name: Optional[str] = Field(None, description='Name of the configuration.')
    supportedVersions: Optional[List[SkaffoldVersion]] = Field(
        None, description='All supported versions of Skaffold.'
    )


class CustomCanaryDeployment(BaseModel):
    phaseConfigs: Optional[List[PhaseConfig]] = Field(
        None,
        description='Required. Configuration for each phase in the canary deployment in the order executed.',
    )


class DeployJobRun(BaseModel):
    build: Optional[str] = Field(
        None,
        description='Output only. The resource name of the Cloud Build `Build` object that is used to deploy. Format is projects/{project}/locations/{location}/builds/{build}.',
    )
    failureCause: Optional[FailureCause] = Field(
        None,
        description='Output only. The reason the deploy failed. This will always be unspecified while the deploy is in progress or if it succeeded.',
    )
    failureMessage: Optional[str] = Field(
        None,
        description='Output only. Additional information about the deploy failure, if available.',
    )
    metadata: Optional[DeployJobRunMetadata] = Field(
        None,
        description='Output only. Metadata containing information about the deploy job run.',
    )


class ExecutionConfig(BaseModel):
    artifactStorage: Optional[str] = Field(
        None,
        description='Optional. Cloud Storage location in which to store execution outputs. This can either be a bucket ("gs://my-bucket") or a path within a bucket ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the same region will be used.',
    )
    defaultPool: Optional[DefaultPool] = Field(
        None, description='Optional. Use default Cloud Build pool.'
    )
    executionTimeout: Optional[str] = Field(
        None,
        description='Optional. Execution timeout for a Cloud Build Execution. This must be between 10m and 24h in seconds format. If unspecified, a default timeout of 1h is used.',
    )
    privatePool: Optional[PrivatePool] = Field(
        None, description='Optional. Use private Cloud Build pool.'
    )
    serviceAccount: Optional[str] = Field(
        None,
        description='Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) is used.',
    )
    usages: Optional[List[Usage]] = Field(
        None, description='Required. Usages when this configuration should be applied.'
    )
    workerPool: Optional[str] = Field(
        None,
        description='Optional. The resource name of the `WorkerPool`, with the format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. If this optional field is unspecified, the default Cloud Build pool will be used.',
    )


class Job(BaseModel):
    advanceChildRolloutJob: Optional[AdvanceChildRolloutJob] = Field(
        None, description='Output only. An advanceChildRollout Job.'
    )
    createChildRolloutJob: Optional[CreateChildRolloutJob] = Field(
        None, description='Output only. A createChildRollout Job.'
    )
    deployJob: Optional[DeployJob] = Field(
        None, description='Output only. A deploy Job.'
    )
    id: Optional[str] = Field(None, description='Output only. The ID of the Job.')
    jobRun: Optional[str] = Field(
        None,
        description='Output only. The name of the `JobRun` responsible for the most recent invocation of this Job.',
    )
    skipMessage: Optional[str] = Field(
        None,
        description='Output only. Additional information on why the Job was skipped, if available.',
    )
    state: Optional[State] = Field(
        None, description='Output only. The current state of the Job.'
    )
    verifyJob: Optional[VerifyJob] = Field(
        None, description='Output only. A verify Job.'
    )


class JobRun(BaseModel):
    advanceChildRolloutJobRun: Optional[AdvanceChildRolloutJobRun] = Field(
        None,
        description='Output only. Information specific to an advanceChildRollout `JobRun`',
    )
    createChildRolloutJobRun: Optional[CreateChildRolloutJobRun] = Field(
        None,
        description='Output only. Information specific to a createChildRollout `JobRun`.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. Time at which the `JobRun` was created.'
    )
    deployJobRun: Optional[DeployJobRun] = Field(
        None, description='Output only. Information specific to a deploy `JobRun`.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. Time at which the `JobRun` ended.'
    )
    etag: Optional[str] = Field(
        None,
        description='Output only. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.',
    )
    jobId: Optional[str] = Field(
        None,
        description='Output only. ID of the `Rollout` job this `JobRun` corresponds to.',
    )
    name: Optional[str] = Field(
        None,
        description='Optional. Name of the `JobRun`. Format is projects/{project}/locations/{location}/ deliveryPipelines/{deliveryPipeline}/releases/{releases}/rollouts/ {rollouts}/jobRuns/{uuid}.',
    )
    phaseId: Optional[str] = Field(
        None,
        description='Output only. ID of the `Rollout` phase this `JobRun` belongs in.',
    )
    startTime: Optional[str] = Field(
        None, description='Output only. Time at which the `JobRun` was started.'
    )
    state: Optional[State1] = Field(
        None, description='Output only. The current state of the `JobRun`.'
    )
    uid: Optional[str] = Field(
        None, description='Output only. Unique identifier of the `JobRun`.'
    )
    verifyJobRun: Optional[VerifyJobRun] = Field(
        None, description='Output only. Information specific to a verify `JobRun`.'
    )


class KubernetesConfig(BaseModel):
    gatewayServiceMesh: Optional[GatewayServiceMesh] = Field(
        None, description='Kubernetes Gateway API service mesh configuration.'
    )
    serviceNetworking: Optional[ServiceNetworking] = Field(
        None, description='Kubernetes Service networking configuration.'
    )


class ListJobRunsResponse(BaseModel):
    jobRuns: Optional[List[JobRun]] = Field(None, description='The `JobRun` objects.')
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached'
    )


class ListLocationsResponse(BaseModel):
    locations: Optional[List[Location]] = Field(
        None,
        description='A list of locations that matches the specified filter in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class PipelineCondition(BaseModel):
    pipelineReadyCondition: Optional[PipelineReadyCondition] = Field(
        None, description="Details around the Pipeline's overall status."
    )
    targetsPresentCondition: Optional[TargetsPresentCondition] = Field(
        None, description='Details around targets enumerated in the pipeline.'
    )
    targetsTypeCondition: Optional[TargetsTypeCondition] = Field(
        None,
        description='Details on the whether the targets enumerated in the pipeline are of the same type.',
    )


class Policy(BaseModel):
    auditConfigs: Optional[List[AuditConfig]] = Field(
        None, description='Specifies cloud audit logging configuration for this policy.'
    )
    bindings: Optional[List[Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class ReleaseCondition(BaseModel):
    releaseReadyCondition: Optional[ReleaseReadyCondition] = Field(
        None, description="Details around the Releases's overall status."
    )
    skaffoldSupportedCondition: Optional[SkaffoldSupportedCondition] = Field(
        None,
        description="Details around the support state of the release's skaffold version.",
    )


class RuntimeConfig(BaseModel):
    cloudRun: Optional[CloudRunConfig] = Field(
        None, description='Cloud Run runtime configuration.'
    )
    kubernetes: Optional[KubernetesConfig] = Field(
        None, description='Kubernetes runtime configuration.'
    )


class SetIamPolicyRequest(BaseModel):
    policy: Optional[Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`',
    )


class Target(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.',
    )
    anthosCluster: Optional[AnthosCluster] = Field(
        None, description='Information specifying an Anthos Cluster.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. Time at which the `Target` was created.'
    )
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the `Target`. Max length is 255 characters.',
    )
    etag: Optional[str] = Field(
        None,
        description='Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.',
    )
    executionConfigs: Optional[List[ExecutionConfig]] = Field(
        None,
        description='Configurations for all execution that relates to this `Target`. Each `ExecutionEnvironmentUsage` value may only be used in a single configuration; using the same value multiple times is an error. When one or more configurations are specified, they must include the `RENDER` and `DEPLOY` `ExecutionEnvironmentUsage` values. When no configurations are specified, execution will use the default specified in `DefaultPool`.',
    )
    gke: Optional[GkeCluster] = Field(
        None, description='Information specifying a GKE Cluster.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.',
    )
    multiTarget: Optional[MultiTarget] = Field(
        None, description='Information specifying a multiTarget.'
    )
    name: Optional[str] = Field(
        None,
        description='Optional. Name of the `Target`. Format is projects/{project}/locations/{location}/targets/a-z{0,62}.',
    )
    requireApproval: Optional[bool] = Field(
        None, description='Optional. Whether or not the `Target` requires approval.'
    )
    run: Optional[CloudRunLocation] = Field(
        None, description='Information specifying a Cloud Run deployment target.'
    )
    targetId: Optional[str] = Field(
        None, description='Output only. Resource id of the `Target`.'
    )
    uid: Optional[str] = Field(
        None, description='Output only. Unique identifier of the `Target`.'
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. Most recent time at which the `Target` was updated.',
    )


class Canary(BaseModel):
    canaryDeployment: Optional[CanaryDeployment] = Field(
        None, description='Configures the progressive based deployment for a Target.'
    )
    customCanaryDeployment: Optional[CustomCanaryDeployment] = Field(
        None,
        description='Configures the progressive based deployment for a Target, but allows customizing at the phase level where a phase represents each of the percentage deployments.',
    )
    runtimeConfig: Optional[RuntimeConfig] = Field(
        None,
        description='Optional. Runtime specific configurations for the deployment strategy. The runtime configuration is used to determine how Cloud Deploy will split traffic to enable a progressive deployment.',
    )


class ChildRolloutJobs(BaseModel):
    advanceRolloutJobs: Optional[List[Job]] = Field(
        None, description='Output only. List of AdvanceChildRolloutJobs'
    )
    createRolloutJobs: Optional[List[Job]] = Field(
        None, description='Output only. List of CreateChildRolloutJobs'
    )


class DeploymentJobs(BaseModel):
    deployJob: Optional[Job] = Field(
        None,
        description='Output only. The deploy Job. This is the first job run in the phase.',
    )
    verifyJob: Optional[Job] = Field(
        None,
        description='Output only. The verify Job. Runs after a deploy if the deploy succeeds.',
    )


class ListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[Operation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )


class ListTargetsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    targets: Optional[List[Target]] = Field(None, description='The `Target` objects.')
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class Phase(BaseModel):
    childRolloutJobs: Optional[ChildRolloutJobs] = Field(
        None, description='Output only. ChildRollout job composition.'
    )
    deploymentJobs: Optional[DeploymentJobs] = Field(
        None, description='Output only. Deployment job composition.'
    )
    id: Optional[str] = Field(None, description='Output only. The ID of the Phase.')
    skipMessage: Optional[str] = Field(
        None,
        description='Output only. Additional information on why the Phase was skipped, if available.',
    )
    state: Optional[State2] = Field(
        None, description='Output only. Current state of the Phase.'
    )


class Rollout(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None,
        description='User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.',
    )
    approvalState: Optional[ApprovalState] = Field(
        None, description='Output only. Approval state of the `Rollout`.'
    )
    approveTime: Optional[str] = Field(
        None, description='Output only. Time at which the `Rollout` was approved.'
    )
    controllerRollout: Optional[str] = Field(
        None,
        description='Output only. Name of the `ControllerRollout`. Format is projects/{project}/ locations/{location}/deliveryPipelines/{deliveryPipeline}/ releases/{release}/rollouts/a-z{0,62}.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. Time at which the `Rollout` was created.'
    )
    deployEndTime: Optional[str] = Field(
        None, description='Output only. Time at which the `Rollout` finished deploying.'
    )
    deployFailureCause: Optional[DeployFailureCause] = Field(
        None,
        description='Output only. The reason this rollout failed. This will always be unspecified while the rollout is in progress.',
    )
    deployStartTime: Optional[str] = Field(
        None, description='Output only. Time at which the `Rollout` started deploying.'
    )
    deployingBuild: Optional[str] = Field(
        None,
        description='Output only. The resource name of the Cloud Build `Build` object that is used to deploy the Rollout. Format is `projects/{project}/locations/{location}/builds/{build}`.',
    )
    description: Optional[str] = Field(
        None,
        description='Description of the `Rollout` for user purposes. Max length is 255 characters.',
    )
    enqueueTime: Optional[str] = Field(
        None, description='Output only. Time at which the `Rollout` was enqueued.'
    )
    etag: Optional[str] = Field(
        None,
        description='This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.',
    )
    failureReason: Optional[str] = Field(
        None,
        description='Output only. Additional information about the rollout failure, if available.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.',
    )
    metadata: Optional[Metadata] = Field(
        None,
        description='Output only. Metadata contains information about the rollout.',
    )
    name: Optional[str] = Field(
        None,
        description='Optional. Name of the `Rollout`. Format is projects/{project}/ locations/{location}/deliveryPipelines/{deliveryPipeline}/ releases/{release}/rollouts/a-z{0,62}.',
    )
    phases: Optional[List[Phase]] = Field(
        None,
        description='Output only. The phases that represent the workflows of this `Rollout`.',
    )
    state: Optional[State3] = Field(
        None, description='Output only. Current state of the `Rollout`.'
    )
    targetId: Optional[str] = Field(
        None,
        description='Required. The ID of Target to which this `Rollout` is deploying.',
    )
    uid: Optional[str] = Field(
        None, description='Output only. Unique identifier of the `Rollout`.'
    )


class Strategy(BaseModel):
    canary: Optional[Canary] = Field(
        None,
        description='Canary deployment strategy provides progressive percentage based deployments to a Target.',
    )
    standard: Optional[Standard] = Field(
        None,
        description='Standard deployment strategy executes a single deploy and allows verifying the deployment.',
    )


class ListRolloutsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    rollouts: Optional[List[Rollout]] = Field(
        None, description='The `Rollout` objects.'
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class Stage(BaseModel):
    profiles: Optional[List[str]] = Field(
        None,
        description="Skaffold profiles to use when rendering the manifest for this stage's `Target`.",
    )
    strategy: Optional[Strategy] = Field(
        None, description='Optional. The strategy to use for a `Rollout` to this stage.'
    )
    targetId: Optional[str] = Field(
        None,
        description='The target_id to which this stage points. This field refers exclusively to the last segment of a target name. For example, this field would just be `my-target` (rather than `projects/project/locations/location/targets/my-target`). The location of the `Target` is inferred to be the same as the location of the `DeliveryPipeline` that contains this `Stage`.',
    )


class SerialPipeline(BaseModel):
    stages: Optional[List[Stage]] = Field(
        None,
        description='Each stage specifies configuration for a `Target`. The ordering of this list defines the promotion flow.',
    )


class DeliveryPipeline(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None,
        description='User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy.',
    )
    condition: Optional[PipelineCondition] = Field(
        None,
        description='Output only. Information around the state of the Delivery Pipeline.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. Time at which the pipeline was created.'
    )
    description: Optional[str] = Field(
        None,
        description='Description of the `DeliveryPipeline`. Max length is 255 characters.',
    )
    etag: Optional[str] = Field(
        None,
        description='This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.',
    )
    name: Optional[str] = Field(
        None,
        description='Optional. Name of the `DeliveryPipeline`. Format is projects/{project}/ locations/{location}/deliveryPipelines/a-z{0,62}.',
    )
    serialPipeline: Optional[SerialPipeline] = Field(
        None,
        description='SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.',
    )
    suspended: Optional[bool] = Field(
        None,
        description='When suspended, no new releases or rollouts can be created, but in-progress ones will complete.',
    )
    uid: Optional[str] = Field(
        None, description='Output only. Unique identifier of the `DeliveryPipeline`.'
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. Most recent time at which the pipeline was updated.',
    )


class ListDeliveryPipelinesResponse(BaseModel):
    deliveryPipelines: Optional[List[DeliveryPipeline]] = Field(
        None, description='The `DeliveryPipeline` objects.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class Release(BaseModel):
    abandoned: Optional[bool] = Field(
        None, description='Output only. Indicates whether this is an abandoned release.'
    )
    annotations: Optional[Dict[str, str]] = Field(
        None,
        description='User annotations. These attributes can only be set and used by the user, and not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.',
    )
    buildArtifacts: Optional[List[BuildArtifact]] = Field(
        None, description='List of artifacts to pass through to Skaffold command.'
    )
    condition: Optional[ReleaseCondition] = Field(
        None, description='Output only. Information around the state of the Release.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. Time at which the `Release` was created.'
    )
    deliveryPipelineSnapshot: Optional[DeliveryPipeline] = Field(
        None,
        description='Output only. Snapshot of the parent pipeline taken at release creation time.',
    )
    description: Optional[str] = Field(
        None, description='Description of the `Release`. Max length is 255 characters.'
    )
    etag: Optional[str] = Field(
        None,
        description='This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Labels are attributes that can be set and used by both the user and by Google Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.',
    )
    name: Optional[str] = Field(
        None,
        description='Optional. Name of the `Release`. Format is projects/{project}/ locations/{location}/deliveryPipelines/{deliveryPipeline}/ releases/a-z{0,62}.',
    )
    renderEndTime: Optional[str] = Field(
        None, description='Output only. Time at which the render completed.'
    )
    renderStartTime: Optional[str] = Field(
        None, description='Output only. Time at which the render began.'
    )
    renderState: Optional[RenderState] = Field(
        None, description='Output only. Current state of the render operation.'
    )
    skaffoldConfigPath: Optional[str] = Field(
        None, description='Filepath of the Skaffold config inside of the config URI.'
    )
    skaffoldConfigUri: Optional[str] = Field(
        None,
        description='Cloud Storage URI of tar.gz archive containing Skaffold configuration.',
    )
    skaffoldVersion: Optional[str] = Field(
        None,
        description='The Skaffold version to use when operating on this release, such as "1.20.0". Not all versions are valid; Google Cloud Deploy supports a specific set of versions. If unset, the most recent supported Skaffold version will be used.',
    )
    targetArtifacts: Optional[Dict[str, TargetArtifact]] = Field(
        None,
        description='Output only. Map from target ID to the target artifacts created during the render operation.',
    )
    targetRenders: Optional[Dict[str, TargetRender]] = Field(
        None,
        description='Output only. Map from target ID to details of the render operation for that target.',
    )
    targetSnapshots: Optional[List[Target]] = Field(
        None,
        description='Output only. Snapshot of the targets taken at release creation time.',
    )
    uid: Optional[str] = Field(
        None, description='Output only. Unique identifier of the `Release`.'
    )


class ListReleasesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    releases: Optional[List[Release]] = Field(
        None, description='The `Release` objects.'
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )
